
Motor_DC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005124  08005124  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800512c  0800512c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  080051a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080051a4  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fda2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f58  00000000  00000000  0002fe42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00031da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00032ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ad2  00000000  00000000  00033748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f197  00000000  00000000  0004b21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a355  00000000  00000000  0005a3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b94  00000000  00000000  000f475c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050b0 	.word	0x080050b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080050b0 	.word	0x080050b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b09a      	sub	sp, #104	; 0x68
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fc79 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f857 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9cf 	bl	8000928 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f983 	bl	8000894 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800058e:	f000 f9ab 	bl	80008e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000592:	f000 f8b7 	bl	8000704 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000596:	f000 f907 	bl	80007a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /*Configure GPIO pin Output Level */
  TIM2 -> CCR1 = ADC_CONV;
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <main+0x9c>)
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  // Start DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_CONV, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	491b      	ldr	r1, [pc, #108]	; (8000614 <main+0x9c>)
 80005a8:	481b      	ldr	r0, [pc, #108]	; (8000618 <main+0xa0>)
 80005aa:	f000 fd19 	bl	8000fe0 <HAL_ADC_Start_DMA>

  // Start PWM
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	481a      	ldr	r0, [pc, #104]	; (800061c <main+0xa4>)
 80005b2:	f002 fcaf 	bl	8002f14 <HAL_TIM_PWM_Start_IT>

  // Start motor
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <main+0xa8>)
 80005be:	f001 ff73 	bl	80024a8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4817      	ldr	r0, [pc, #92]	; (8000624 <main+0xac>)
 80005c8:	f001 ff56 	bl	8002478 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <main+0x68>
		HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xb0>)
 80005da:	f001 ff65 	bl	80024a8 <HAL_GPIO_WritePin>
 80005de:	e005      	b.n	80005ec <main+0x74>
	else
	HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e6:	4810      	ldr	r0, [pc, #64]	; (8000628 <main+0xb0>)
 80005e8:	f001 ff5e 	bl	80024a8 <HAL_GPIO_WritePin>
	msg_size = sprintf((char*) msg,"%u\n\r",ADC_CONV);
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <main+0x9c>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	463b      	mov	r3, r7
 80005f4:	490d      	ldr	r1, [pc, #52]	; (800062c <main+0xb4>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 f92c 	bl	8004854 <siprintf>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	HAL_UART_Transmit_IT(&huart2, msg, msg_size);
 8000602:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <main+0xb8>)
 800060c:	f003 fa91 	bl	8003b32 <HAL_UART_Transmit_IT>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000610:	e7d7      	b.n	80005c2 <main+0x4a>
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c
 8000618:	2000009c 	.word	0x2000009c
 800061c:	20000144 	.word	0x20000144
 8000620:	40020000 	.word	0x40020000
 8000624:	40020800 	.word	0x40020800
 8000628:	40020400 	.word	0x40020400
 800062c:	080050c8 	.word	0x080050c8
 8000630:	2000018c 	.word	0x2000018c

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 f8fe 	bl	8004844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a26      	ldr	r2, [pc, #152]	; (80006fc <SystemClock_Config+0xc8>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SystemClock_Config+0xcc>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 ff0f 	bl	80024dc <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f9da 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2103      	movs	r1, #3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f971 	bl	80029cc <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 f9c4 	bl	8000a7c <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	; 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC1_Init+0x98>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x9c>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_ADC1_Init+0x98>)
 800071e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_ADC1_Init+0x98>)
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_ADC1_Init+0xa0>)
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_ADC1_Init+0x98>)
 8000752:	2201      	movs	r2, #1
 8000754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_ADC1_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_ADC1_Init+0x98>)
 8000760:	2201      	movs	r2, #1
 8000762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_ADC1_Init+0x98>)
 8000766:	f000 fbf7 	bl	8000f58 <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 f984 	bl	8000a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000774:	2301      	movs	r3, #1
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_ADC1_Init+0x98>)
 8000786:	f000 fd2f 	bl	80011e8 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000790:	f000 f974 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000009c 	.word	0x2000009c
 80007a0:	40012000 	.word	0x40012000
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	; 0x38
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_TIM2_Init+0xe8>)
 80007da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_TIM2_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_TIM2_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_TIM2_Init+0xe8>)
 80007ee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80007f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_TIM2_Init+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_TIM2_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000800:	4823      	ldr	r0, [pc, #140]	; (8000890 <MX_TIM2_Init+0xe8>)
 8000802:	f002 fadf 	bl	8002dc4 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800080c:	f000 f936 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081a:	4619      	mov	r1, r3
 800081c:	481c      	ldr	r0, [pc, #112]	; (8000890 <MX_TIM2_Init+0xe8>)
 800081e:	f002 fd39 	bl	8003294 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000828:	f000 f928 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800082c:	4818      	ldr	r0, [pc, #96]	; (8000890 <MX_TIM2_Init+0xe8>)
 800082e:	f002 fb18 	bl	8002e62 <HAL_TIM_PWM_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000838:	f000 f920 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_TIM2_Init+0xe8>)
 800084c:	f003 f8b6 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000856:	f000 f911 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085a:	2360      	movs	r3, #96	; 0x60
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <MX_TIM2_Init+0xe8>)
 8000872:	f002 fc4d 	bl	8003110 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800087c:	f000 f8fe 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <MX_TIM2_Init+0xe8>)
 8000882:	f000 f9bf 	bl	8000c04 <HAL_TIM_MspPostInit>

}
 8000886:	bf00      	nop
 8000888:	3738      	adds	r7, #56	; 0x38
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000144 	.word	0x20000144

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f003 f8e4 	bl	8003a98 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f8d1 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000018c 	.word	0x2000018c
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA_Init+0x3c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <MX_DMA_Init+0x3c>)
 80008f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_DMA_Init+0x3c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2038      	movs	r0, #56	; 0x38
 8000910:	f000 fff5 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000914:	2038      	movs	r0, #56	; 0x38
 8000916:	f001 f80e 	bl	8001936 <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a38      	ldr	r2, [pc, #224]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_GPIO_Init+0x100>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_GPIO_Init+0x100>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a2a      	ldr	r2, [pc, #168]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <MX_GPIO_Init+0x100>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <MX_GPIO_Init+0x100>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_GPIO_Init+0x100>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_Pin|PWN_HIGH_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80009b4:	481d      	ldr	r0, [pc, #116]	; (8000a2c <MX_GPIO_Init+0x104>)
 80009b6:	f001 fd77 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	481b      	ldr	r0, [pc, #108]	; (8000a30 <MX_GPIO_Init+0x108>)
 80009c2:	f001 fd71 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4815      	ldr	r0, [pc, #84]	; (8000a34 <MX_GPIO_Init+0x10c>)
 80009de:	f001 fbc7 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin PWN_HIGH_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|PWN_HIGH_Pin;
 80009e2:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_GPIO_Init+0x104>)
 80009fc:	f001 fbb8 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_GPIO_Init+0x108>)
 8000a1a:	f001 fba9 	bl	8002170 <HAL_GPIO_Init>

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020800 	.word	0x40020800

08000a38 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ // set call back
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	TIM2 -> CCR1 = (ADC_CONV * 2000 / 4096);
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a4a:	fb03 f302 	mul.w	r3, r3, r2
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da01      	bge.n	8000a56 <HAL_ADC_ConvCpltCallback+0x1e>
 8000a52:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a56:	131b      	asrs	r3, r3, #12
 8000a58:	461a      	mov	r2, r3
 8000a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_CONV, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	4904      	ldr	r1, [pc, #16]	; (8000a74 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <HAL_ADC_ConvCpltCallback+0x40>)
 8000a66:	f000 fabb 	bl	8000fe0 <HAL_ADC_Start_DMA>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	2000009c 	.word	0x2000009c

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f000 ff0e 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a2e      	ldr	r2, [pc, #184]	; (8000bb0 <HAL_ADC_MspInit+0xd8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d156      	bne.n	8000ba8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b46:	f001 fb13 	bl	8002170 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b8e:	f000 feed 	bl	800196c <HAL_DMA_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000b98:	f7ff ff70 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40012000 	.word	0x40012000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	40026410 	.word	0x40026410

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd4:	d10d      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_TIM_Base_MspInit+0x3c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_TIM_Base_MspInit+0x3c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_TIM_Base_MspInit+0x3c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c24:	d11d      	bne.n	8000c62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_TIM_MspPostInit+0x68>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_TIM_MspPostInit+0x68>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_TIM_MspPostInit+0x68>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWN_MOTOR_Pin;
 8000c42:	2320      	movs	r3, #32
 8000c44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <HAL_TIM_MspPostInit+0x6c>)
 8000c5e:	f001 fa87 	bl	8002170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <HAL_UART_MspInit+0x94>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d133      	bne.n	8000cfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_UART_MspInit+0x98>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <HAL_UART_MspInit+0x98>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_UART_MspInit+0x98>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0x98>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_UART_MspInit+0x98>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_UART_MspInit+0x98>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_UART_MspInit+0x9c>)
 8000cea:	f001 fa41 	bl	8002170 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2026      	movs	r0, #38	; 0x26
 8000cf4:	f000 fe03 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf8:	2026      	movs	r0, #38	; 0x26
 8000cfa:	f000 fe1c 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f8da 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <USART2_IRQHandler+0x10>)
 8000d6e:	f002 ff25 	bl	8003bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000018c 	.word	0x2000018c

08000d7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA2_Stream0_IRQHandler+0x10>)
 8000d82:	f000 ff8b 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000e4 	.word	0x200000e4

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f003 fd16 	bl	80047f0 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20020000 	.word	0x20020000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	20000090 	.word	0x20000090
 8000df8:	200001e8 	.word	0x200001e8

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f003 fcd5 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fb91 	bl	8000578 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e64:	08005134 	.word	0x08005134
  ldr r2, =_sbss
 8000e68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e6c:	200001e4 	.word	0x200001e4

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 fd23 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fdee 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fd3b 	bl	8001952 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 fd03 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	200001d0 	.word	0x200001d0

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200001d0 	.word	0x200001d0

08000f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e033      	b.n	8000fd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fdae 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d118      	bne.n	8000fc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f9e:	f023 0302 	bic.w	r3, r3, #2
 8000fa2:	f043 0202 	orr.w	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fa4e 	bl	800144c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc6:	e001      	b.n	8000fcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1e>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e0ce      	b.n	800119c <HAL_ADC_Start_DMA+0x1bc>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b01      	cmp	r3, #1
 8001012:	d018      	beq.n	8001046 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001024:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <HAL_ADC_Start_DMA+0x1c4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <HAL_ADC_Start_DMA+0x1c8>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9a      	lsrs	r2, r3, #18
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001038:	e002      	b.n	8001040 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3b01      	subs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001054:	d107      	bne.n	8001066 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001064:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	f040 8086 	bne.w	8001182 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010b4:	d106      	bne.n	80010c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f023 0206 	bic.w	r2, r3, #6
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
 80010c2:	e002      	b.n	80010ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_ADC_Start_DMA+0x1cc>)
 80010d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010da:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <HAL_ADC_Start_DMA+0x1d0>)
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_ADC_Start_DMA+0x1d4>)
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ea:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <HAL_ADC_Start_DMA+0x1d8>)
 80010ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001106:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001116:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	334c      	adds	r3, #76	; 0x4c
 8001122:	4619      	mov	r1, r3
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f000 fcce 	bl	8001ac8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10f      	bne.n	8001158 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d129      	bne.n	800119a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	e020      	b.n	800119a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_ADC_Start_DMA+0x1dc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11b      	bne.n	800119a <HAL_ADC_Start_DMA+0x1ba>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d114      	bne.n	800119a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	e00b      	b.n	800119a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f043 0210 	orr.w	r2, r3, #16
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f043 0201 	orr.w	r2, r3, #1
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	40012300 	.word	0x40012300
 80011b0:	08001645 	.word	0x08001645
 80011b4:	080016ff 	.word	0x080016ff
 80011b8:	0800171b 	.word	0x0800171b
 80011bc:	40012000 	.word	0x40012000

080011c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1c>
 8001200:	2302      	movs	r3, #2
 8001202:	e113      	b.n	800142c <HAL_ADC_ConfigChannel+0x244>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b09      	cmp	r3, #9
 8001212:	d925      	bls.n	8001260 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68d9      	ldr	r1, [r3, #12]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3b1e      	subs	r3, #30
 800122a:	2207      	movs	r2, #7
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43da      	mvns	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	400a      	ands	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68d9      	ldr	r1, [r3, #12]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	4603      	mov	r3, r0
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4403      	add	r3, r0
 8001252:	3b1e      	subs	r3, #30
 8001254:	409a      	lsls	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	e022      	b.n	80012a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6919      	ldr	r1, [r3, #16]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	2207      	movs	r2, #7
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	400a      	ands	r2, r1
 8001282:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6919      	ldr	r1, [r3, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	4603      	mov	r3, r0
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4403      	add	r3, r0
 800129c:	409a      	lsls	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d824      	bhi.n	80012f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b05      	subs	r3, #5
 80012c0:	221f      	movs	r2, #31
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	400a      	ands	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	3b05      	subs	r3, #5
 80012ea:	fa00 f203 	lsl.w	r2, r0, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
 80012f6:	e04c      	b.n	8001392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d824      	bhi.n	800134a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	3b23      	subs	r3, #35	; 0x23
 8001312:	221f      	movs	r2, #31
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43da      	mvns	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	400a      	ands	r2, r1
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b23      	subs	r3, #35	; 0x23
 800133c:	fa00 f203 	lsl.w	r2, r0, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
 8001348:	e023      	b.n	8001392 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b41      	subs	r3, #65	; 0x41
 800135c:	221f      	movs	r2, #31
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	400a      	ands	r2, r1
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b41      	subs	r3, #65	; 0x41
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <HAL_ADC_ConfigChannel+0x250>)
 8001394:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_ADC_ConfigChannel+0x254>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d10f      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1d8>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_ADC_ConfigChannel+0x254>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12b      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x23a>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_ADC_ConfigChannel+0x258>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d003      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x1f4>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b11      	cmp	r3, #17
 80013da:	d122      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <HAL_ADC_ConfigChannel+0x258>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d111      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_ADC_ConfigChannel+0x25c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_ADC_ConfigChannel+0x260>)
 8001404:	fba2 2303 	umull	r2, r3, r2, r3
 8001408:	0c9a      	lsrs	r2, r3, #18
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001414:	e002      	b.n	800141c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3b01      	subs	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f9      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40012300 	.word	0x40012300
 800143c:	40012000 	.word	0x40012000
 8001440:	10000012 	.word	0x10000012
 8001444:	20000000 	.word	0x20000000
 8001448:	431bde83 	.word	0x431bde83

0800144c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001454:	4b79      	ldr	r3, [pc, #484]	; (800163c <ADC_Init+0x1f0>)
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	431a      	orrs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	021a      	lsls	r2, r3, #8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6899      	ldr	r1, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	4a58      	ldr	r2, [pc, #352]	; (8001640 <ADC_Init+0x1f4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d022      	beq.n	800152a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6899      	ldr	r1, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e00f      	b.n	800154a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0202 	bic.w	r2, r2, #2
 8001558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6899      	ldr	r1, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e1b      	ldrb	r3, [r3, #24]
 8001564:	005a      	lsls	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01b      	beq.n	80015b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6859      	ldr	r1, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	3b01      	subs	r3, #1
 80015a4:	035a      	lsls	r2, r3, #13
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	e007      	b.n	80015c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	3b01      	subs	r3, #1
 80015dc:	051a      	lsls	r2, r3, #20
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001602:	025a      	lsls	r2, r3, #9
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800161a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6899      	ldr	r1, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	029a      	lsls	r2, r3, #10
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40012300 	.word	0x40012300
 8001640:	0f000001 	.word	0x0f000001

08001644 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001650:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800165a:	2b00      	cmp	r3, #0
 800165c:	d13c      	bne.n	80016d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d12b      	bne.n	80016d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800167c:	2b00      	cmp	r3, #0
 800167e:	d127      	bne.n	80016d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001698:	2b00      	cmp	r3, #0
 800169a:	d119      	bne.n	80016d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0220 	bic.w	r2, r2, #32
 80016aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff f9b1 	bl	8000a38 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016d6:	e00e      	b.n	80016f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fd75 	bl	80011d4 <HAL_ADC_ErrorCallback>
}
 80016ea:	e004      	b.n	80016f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fd57 	bl	80011c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f043 0204 	orr.w	r2, r3, #4
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7ff fd4a 	bl	80011d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fae2 	bl	8000f40 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e099      	b.n	8001abc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a8:	e00f      	b.n	80019ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019aa:	f7ff fac9 	bl	8000f40 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d908      	bls.n	80019ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e078      	b.n	8001abc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e8      	bne.n	80019aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_DMA_Init+0x158>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d117      	bne.n	8001a8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb01 	bl	8002078 <DMA_CheckFifoParam>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fab8 	bl	800200c <DMA_CalcBaseAndBitshift>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	f010803f 	.word	0xf010803f

08001ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA_Start_IT+0x26>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e040      	b.n	8001b70 <HAL_DMA_Start_IT+0xa8>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d12f      	bne.n	8001b62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa4a 	bl	8001fb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	223f      	movs	r2, #63	; 0x3f
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0216 	orr.w	r2, r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0208 	orr.w	r2, r2, #8
 8001b4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e005      	b.n	8001b6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b86:	f7ff f9db 	bl	8000f40 <HAL_GetTick>
 8001b8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d008      	beq.n	8001baa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e052      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_Abort+0x62>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfa:	e013      	b.n	8001c24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfc:	f7ff f9a0 	bl	8000f40 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d90c      	bls.n	8001c24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e015      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e4      	bne.n	8001bfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	223f      	movs	r2, #63	; 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d004      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00c      	b.n	8001c90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_DMA_IRQHandler+0x258>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a92      	ldr	r2, [pc, #584]	; (8001ef8 <HAL_DMA_IRQHandler+0x25c>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2204      	movs	r2, #4
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2204      	movs	r2, #4
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	2210      	movs	r2, #16
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d043      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03c      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2210      	movs	r2, #16
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d024      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
 8001dca:	e01f      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e016      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0208 	bic.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2220      	movs	r2, #32
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 808e 	beq.w	8001f3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8086 	beq.w	8001f3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2220      	movs	r2, #32
 8001e34:	409a      	lsls	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d136      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0216 	bic.w	r2, r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x1da>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0208 	bic.w	r2, r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	223f      	movs	r2, #63	; 0x3f
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d07d      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
        }
        return;
 8001eb2:	e078      	b.n	8001fa6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01c      	beq.n	8001efc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d030      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e02b      	b.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d027      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
 8001ef2:	e022      	b.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0210 	bic.w	r2, r2, #16
 8001f18:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d032      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d022      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d307      	bcc.n	8001f82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f2      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x2ca>
 8001f80:	e000      	b.n	8001f84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f82:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	e000      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fa6:	bf00      	nop
    }
  }
}
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop

08001fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b40      	cmp	r3, #64	; 0x40
 8001fdc:	d108      	bne.n	8001ff0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fee:	e007      	b.n	8002000 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	3b10      	subs	r3, #16
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <DMA_CalcBaseAndBitshift+0x64>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <DMA_CalcBaseAndBitshift+0x68>)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d909      	bls.n	800204e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	1d1a      	adds	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	659a      	str	r2, [r3, #88]	; 0x58
 800204c:	e007      	b.n	800205e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	aaaaaaab 	.word	0xaaaaaaab
 8002074:	080050e8 	.word	0x080050e8

08002078 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11f      	bne.n	80020d2 <DMA_CheckFifoParam+0x5a>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d856      	bhi.n	8002146 <DMA_CheckFifoParam+0xce>
 8002098:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <DMA_CheckFifoParam+0x28>)
 800209a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209e:	bf00      	nop
 80020a0:	080020b1 	.word	0x080020b1
 80020a4:	080020c3 	.word	0x080020c3
 80020a8:	080020b1 	.word	0x080020b1
 80020ac:	08002147 	.word	0x08002147
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d046      	beq.n	800214a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c0:	e043      	b.n	800214a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ca:	d140      	bne.n	800214e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d0:	e03d      	b.n	800214e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020da:	d121      	bne.n	8002120 <DMA_CheckFifoParam+0xa8>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d837      	bhi.n	8002152 <DMA_CheckFifoParam+0xda>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <DMA_CheckFifoParam+0x70>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	080020ff 	.word	0x080020ff
 80020f0:	080020f9 	.word	0x080020f9
 80020f4:	08002111 	.word	0x08002111
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      break;
 80020fc:	e030      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d025      	beq.n	8002156 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210e:	e022      	b.n	8002156 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002118:	d11f      	bne.n	800215a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800211e:	e01c      	b.n	800215a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d903      	bls.n	800212e <DMA_CheckFifoParam+0xb6>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d003      	beq.n	8002134 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800212c:	e018      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
      break;
 8002132:	e015      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      break;
 8002144:	e00b      	b.n	800215e <DMA_CheckFifoParam+0xe6>
      break;
 8002146:	bf00      	nop
 8002148:	e00a      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e008      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e006      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e004      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 8002156:	bf00      	nop
 8002158:	e002      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;   
 800215a:	bf00      	nop
 800215c:	e000      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 800215e:	bf00      	nop
    }
  } 
  
  return status; 
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e159      	b.n	8002440 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 8148 	bne.w	800243a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d130      	bne.n	8002224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b03      	cmp	r3, #3
 800222e:	d017      	beq.n	8002260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d123      	bne.n	80022b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	220f      	movs	r2, #15
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a2 	beq.w	800243a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b57      	ldr	r3, [pc, #348]	; (8002458 <HAL_GPIO_Init+0x2e8>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a56      	ldr	r2, [pc, #344]	; (8002458 <HAL_GPIO_Init+0x2e8>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <HAL_GPIO_Init+0x2e8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002312:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_GPIO_Init+0x2ec>)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a49      	ldr	r2, [pc, #292]	; (8002460 <HAL_GPIO_Init+0x2f0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d019      	beq.n	8002372 <HAL_GPIO_Init+0x202>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_GPIO_Init+0x2f4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_GPIO_Init+0x1fe>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a47      	ldr	r2, [pc, #284]	; (8002468 <HAL_GPIO_Init+0x2f8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00d      	beq.n	800236a <HAL_GPIO_Init+0x1fa>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a46      	ldr	r2, [pc, #280]	; (800246c <HAL_GPIO_Init+0x2fc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d007      	beq.n	8002366 <HAL_GPIO_Init+0x1f6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a45      	ldr	r2, [pc, #276]	; (8002470 <HAL_GPIO_Init+0x300>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_GPIO_Init+0x1f2>
 800235e:	2304      	movs	r3, #4
 8002360:	e008      	b.n	8002374 <HAL_GPIO_Init+0x204>
 8002362:	2307      	movs	r3, #7
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x204>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <HAL_GPIO_Init+0x204>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <HAL_GPIO_Init+0x204>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x204>
 8002372:	2300      	movs	r3, #0
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f002 0203 	and.w	r2, r2, #3
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	4093      	lsls	r3, r2
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002384:	4935      	ldr	r1, [pc, #212]	; (800245c <HAL_GPIO_Init+0x2ec>)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002392:	4b38      	ldr	r3, [pc, #224]	; (8002474 <HAL_GPIO_Init+0x304>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b6:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_GPIO_Init+0x304>)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_GPIO_Init+0x304>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <HAL_GPIO_Init+0x304>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_GPIO_Init+0x304>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_GPIO_Init+0x304>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_GPIO_Init+0x304>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <HAL_GPIO_Init+0x304>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3301      	adds	r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	f67f aea2 	bls.w	800218c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40013c00 	.word	0x40013c00

08002478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e001      	b.n	800249a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c4:	e003      	b.n	80024ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	619a      	str	r2, [r3, #24]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e264      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d075      	beq.n	80025e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	4ba3      	ldr	r3, [pc, #652]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00c      	beq.n	8002520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4ba0      	ldr	r3, [pc, #640]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002512:	4b9d      	ldr	r3, [pc, #628]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e23f      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a90      	ldr	r2, [pc, #576]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b8b      	ldr	r3, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a8a      	ldr	r2, [pc, #552]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a87      	ldr	r2, [pc, #540]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002574:	4b84      	ldr	r3, [pc, #528]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a83      	ldr	r2, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b81      	ldr	r3, [pc, #516]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a80      	ldr	r2, [pc, #512]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fcd4 	bl	8000f40 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fcd0 	bl	8000f40 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e204      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xc0>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcc0 	bl	8000f40 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fcbc 	bl	8000f40 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1f0      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d063      	beq.n	80026ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11c      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e1c4      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4952      	ldr	r1, [pc, #328]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e03a      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_RCC_OscConfig+0x2b0>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fc75 	bl	8000f40 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fc71 	bl	8000f40 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1a5      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4940      	ldr	r1, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_OscConfig+0x2b0>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fc54 	bl	8000f40 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fc50 	bl	8000f40 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e184      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d030      	beq.n	8002728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_RCC_OscConfig+0x2b4>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fc34 	bl	8000f40 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fe fc30 	bl	8000f40 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e164      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
 80026fa:	e015      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_OscConfig+0x2b4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe fc1d 	bl	8000f40 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe fc19 	bl	8000f40 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e14d      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a0 	beq.w	8002876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d121      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_RCC_OscConfig+0x2b8>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe fbdf 	bl	8000f40 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e011      	b.n	80027aa <HAL_RCC_OscConfig+0x2ce>
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	42470000 	.word	0x42470000
 8002790:	42470e80 	.word	0x42470e80
 8002794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe fbd2 	bl	8000f40 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e106      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <HAL_RCC_OscConfig+0x4e4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
 80027be:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x32a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027d4:	4b7b      	ldr	r3, [pc, #492]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a7a      	ldr	r2, [pc, #488]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b78      	ldr	r3, [pc, #480]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a77      	ldr	r2, [pc, #476]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x32a>
 80027ee:	4b75      	ldr	r3, [pc, #468]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a74      	ldr	r2, [pc, #464]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b72      	ldr	r3, [pc, #456]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a71      	ldr	r2, [pc, #452]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7fe fb97 	bl	8000f40 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe fb93 	bl	8000f40 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0c5      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b65      	ldr	r3, [pc, #404]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x33a>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe fb81 	bl	8000f40 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fb7d 	bl	8000f40 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0af      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a55      	ldr	r2, [pc, #340]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 809b 	beq.w	80029b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d05c      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d141      	bne.n	8002918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe fb51 	bl	8000f40 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe fb4d 	bl	8000f40 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e081      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	061b      	lsls	r3, r3, #24
 80028e4:	4937      	ldr	r1, [pc, #220]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ea:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fb26 	bl	8000f40 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fb22 	bl	8000f40 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e056      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x41c>
 8002916:	e04e      	b.n	80029b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fb0f 	bl	8000f40 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fb0b 	bl	8000f40 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e03f      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x44a>
 8002944:	e037      	b.n	80029b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e032      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_RCC_OscConfig+0x4e8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d028      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d121      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d11a      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002988:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298a:	4293      	cmp	r3, r2
 800298c:	d111      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40007000 	.word	0x40007000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470060 	.word	0x42470060

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cc      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d90c      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d044      	beq.n	8002aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e067      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4934      	ldr	r1, [pc, #208]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fa40 	bl	8000f40 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe fa3c 	bl	8000f40 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e04f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d20c      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f821 	bl	8002b98 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f9a0 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	080050d0 	.word	0x080050d0
 8002b90:	20000000 	.word	0x20000000
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb0:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d00d      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	f200 80bd 	bhi.w	8002d3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x34>
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bca:	e0b7      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bce:	60bb      	str	r3, [r7, #8]
       break;
 8002bd0:	e0b7      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd2:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002bd4:	60bb      	str	r3, [r7, #8]
      break;
 8002bd6:	e0b4      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd8:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d04d      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bee:	4b58      	ldr	r3, [pc, #352]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	ea02 0800 	and.w	r8, r2, r0
 8002c06:	ea03 0901 	and.w	r9, r3, r1
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	014b      	lsls	r3, r1, #5
 8002c18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c1c:	0142      	lsls	r2, r0, #5
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	ebb0 0008 	subs.w	r0, r0, r8
 8002c26:	eb61 0109 	sbc.w	r1, r1, r9
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	018b      	lsls	r3, r1, #6
 8002c34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c38:	0182      	lsls	r2, r0, #6
 8002c3a:	1a12      	subs	r2, r2, r0
 8002c3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	00d9      	lsls	r1, r3, #3
 8002c4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c4e:	00d0      	lsls	r0, r2, #3
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	eb12 0208 	adds.w	r2, r2, r8
 8002c58:	eb43 0309 	adc.w	r3, r3, r9
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	0259      	lsls	r1, r3, #9
 8002c66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c6a:	0250      	lsls	r0, r2, #9
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	f7fd fb00 	bl	8000280 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e04a      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	461a      	mov	r2, r3
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	ea02 0400 	and.w	r4, r2, r0
 8002ca2:	ea03 0501 	and.w	r5, r3, r1
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	4629      	mov	r1, r5
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	014b      	lsls	r3, r1, #5
 8002cb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cb8:	0142      	lsls	r2, r0, #5
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	1b00      	subs	r0, r0, r4
 8002cc0:	eb61 0105 	sbc.w	r1, r1, r5
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	018b      	lsls	r3, r1, #6
 8002cce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cd2:	0182      	lsls	r2, r0, #6
 8002cd4:	1a12      	subs	r2, r2, r0
 8002cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cda:	f04f 0000 	mov.w	r0, #0
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	00d9      	lsls	r1, r3, #3
 8002ce4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ce8:	00d0      	lsls	r0, r2, #3
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	1912      	adds	r2, r2, r4
 8002cf0:	eb45 0303 	adc.w	r3, r5, r3
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	0299      	lsls	r1, r3, #10
 8002cfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d02:	0290      	lsls	r0, r2, #10
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f7fd fab4 	bl	8000280 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	60bb      	str	r3, [r7, #8]
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d3e:	60bb      	str	r3, [r7, #8]
      break;
 8002d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d42:	68bb      	ldr	r3, [r7, #8]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a9b      	lsrs	r3, r3, #10
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	080050e0 	.word	0x080050e0

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff ffdc 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0b5b      	lsrs	r3, r3, #13
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	080050e0 	.word	0x080050e0

08002dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fd feea 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f000 fb0e 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e041      	b.n	8002ef8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f839 	bl	8002f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f000 fabf 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_TIM_PWM_Start_IT+0x28>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e022      	b.n	8002f82 <HAL_TIM_PWM_Start_IT+0x6e>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d109      	bne.n	8002f56 <HAL_TIM_PWM_Start_IT+0x42>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e015      	b.n	8002f82 <HAL_TIM_PWM_Start_IT+0x6e>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d109      	bne.n	8002f70 <HAL_TIM_PWM_Start_IT+0x5c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e008      	b.n	8002f82 <HAL_TIM_PWM_Start_IT+0x6e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0b3      	b.n	80030f2 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Start_IT+0x86>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f98:	e013      	b.n	8002fc2 <HAL_TIM_PWM_Start_IT+0xae>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Start_IT+0x96>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa8:	e00b      	b.n	8002fc2 <HAL_TIM_PWM_Start_IT+0xae>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start_IT+0xa6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb8:	e003      	b.n	8002fc2 <HAL_TIM_PWM_Start_IT+0xae>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d841      	bhi.n	800304c <HAL_TIM_PWM_Start_IT+0x138>
 8002fc8:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fce:	bf00      	nop
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	0800304d 	.word	0x0800304d
 8002fd8:	0800304d 	.word	0x0800304d
 8002fdc:	0800304d 	.word	0x0800304d
 8002fe0:	08003017 	.word	0x08003017
 8002fe4:	0800304d 	.word	0x0800304d
 8002fe8:	0800304d 	.word	0x0800304d
 8002fec:	0800304d 	.word	0x0800304d
 8002ff0:	08003029 	.word	0x08003029
 8002ff4:	0800304d 	.word	0x0800304d
 8002ff8:	0800304d 	.word	0x0800304d
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	0800303b 	.word	0x0800303b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0202 	orr.w	r2, r2, #2
 8003012:	60da      	str	r2, [r3, #12]
      break;
 8003014:	e01d      	b.n	8003052 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0204 	orr.w	r2, r2, #4
 8003024:	60da      	str	r2, [r3, #12]
      break;
 8003026:	e014      	b.n	8003052 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	60da      	str	r2, [r3, #12]
      break;
 8003038:	e00b      	b.n	8003052 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0210 	orr.w	r2, r2, #16
 8003048:	60da      	str	r2, [r3, #12]
      break;
 800304a:	e002      	b.n	8003052 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	bf00      	nop
  }

  if (status == HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d14b      	bne.n	80030f0 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	6839      	ldr	r1, [r7, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fc85 	bl	8003970 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a24      	ldr	r2, [pc, #144]	; (80030fc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d107      	bne.n	8003080 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800307e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d018      	beq.n	80030bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d013      	beq.n	80030bc <HAL_TIM_PWM_Start_IT+0x1a8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00e      	beq.n	80030bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_TIM_PWM_Start_IT+0x1a8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a16      	ldr	r2, [pc, #88]	; (8003108 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_TIM_PWM_Start_IT+0x1a8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_TIM_PWM_Start_IT+0x1f8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d111      	bne.n	80030e0 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d010      	beq.n	80030f0 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030de:	e007      	b.n	80030f0 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800
 8003108:	40000c00 	.word	0x40000c00
 800310c:	40014000 	.word	0x40014000

08003110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800312a:	2302      	movs	r3, #2
 800312c:	e0ae      	b.n	800328c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	f200 809f 	bhi.w	800327c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003179 	.word	0x08003179
 8003148:	0800327d 	.word	0x0800327d
 800314c:	0800327d 	.word	0x0800327d
 8003150:	0800327d 	.word	0x0800327d
 8003154:	080031b9 	.word	0x080031b9
 8003158:	0800327d 	.word	0x0800327d
 800315c:	0800327d 	.word	0x0800327d
 8003160:	0800327d 	.word	0x0800327d
 8003164:	080031fb 	.word	0x080031fb
 8003168:	0800327d 	.word	0x0800327d
 800316c:	0800327d 	.word	0x0800327d
 8003170:	0800327d 	.word	0x0800327d
 8003174:	0800323b 	.word	0x0800323b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f9d0 	bl	8003524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0208 	orr.w	r2, r2, #8
 8003192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0204 	bic.w	r2, r2, #4
 80031a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6999      	ldr	r1, [r3, #24]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	619a      	str	r2, [r3, #24]
      break;
 80031b6:	e064      	b.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fa16 	bl	80035f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6999      	ldr	r1, [r3, #24]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	021a      	lsls	r2, r3, #8
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	619a      	str	r2, [r3, #24]
      break;
 80031f8:	e043      	b.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fa61 	bl	80036c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0208 	orr.w	r2, r2, #8
 8003214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0204 	bic.w	r2, r2, #4
 8003224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69d9      	ldr	r1, [r3, #28]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	61da      	str	r2, [r3, #28]
      break;
 8003238:	e023      	b.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 faab 	bl	800379c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69d9      	ldr	r1, [r3, #28]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	021a      	lsls	r2, r3, #8
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	61da      	str	r2, [r3, #28]
      break;
 800327a:	e002      	b.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
      break;
 8003280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800328a:	7dfb      	ldrb	r3, [r7, #23]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_TIM_ConfigClockSource+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e0b4      	b.n	800341a <HAL_TIM_ConfigClockSource+0x186>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e8:	d03e      	beq.n	8003368 <HAL_TIM_ConfigClockSource+0xd4>
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	f200 8087 	bhi.w	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 80032f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f6:	f000 8086 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x172>
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d87f      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b70      	cmp	r3, #112	; 0x70
 8003302:	d01a      	beq.n	800333a <HAL_TIM_ConfigClockSource+0xa6>
 8003304:	2b70      	cmp	r3, #112	; 0x70
 8003306:	d87b      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b60      	cmp	r3, #96	; 0x60
 800330a:	d050      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x11a>
 800330c:	2b60      	cmp	r3, #96	; 0x60
 800330e:	d877      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b50      	cmp	r3, #80	; 0x50
 8003312:	d03c      	beq.n	800338e <HAL_TIM_ConfigClockSource+0xfa>
 8003314:	2b50      	cmp	r3, #80	; 0x50
 8003316:	d873      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d058      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x13a>
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d86f      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b30      	cmp	r3, #48	; 0x30
 8003322:	d064      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 8003324:	2b30      	cmp	r3, #48	; 0x30
 8003326:	d86b      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b20      	cmp	r3, #32
 800332a:	d060      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d867      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05c      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 8003334:	2b10      	cmp	r3, #16
 8003336:	d05a      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x15a>
 8003338:	e062      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f000 faf1 	bl	8003930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800335c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	609a      	str	r2, [r3, #8]
      break;
 8003366:	e04f      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f000 fada 	bl	8003930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338a:	609a      	str	r2, [r3, #8]
      break;
 800338c:	e03c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	461a      	mov	r2, r3
 800339c:	f000 fa4e 	bl	800383c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2150      	movs	r1, #80	; 0x50
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 faa7 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80033ac:	e02c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 fa6d 	bl	800389a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2160      	movs	r1, #96	; 0x60
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fa97 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80033cc:	e01c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 fa2e 	bl	800383c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa87 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80033ec:	e00c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f000 fa7e 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80033fe:	e003      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e000      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a34      	ldr	r2, [pc, #208]	; (8003508 <TIM_Base_SetConfig+0xe4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00f      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d00b      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a31      	ldr	r2, [pc, #196]	; (800350c <TIM_Base_SetConfig+0xe8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a30      	ldr	r2, [pc, #192]	; (8003510 <TIM_Base_SetConfig+0xec>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0x38>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a2f      	ldr	r2, [pc, #188]	; (8003514 <TIM_Base_SetConfig+0xf0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d108      	bne.n	800346e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a25      	ldr	r2, [pc, #148]	; (8003508 <TIM_Base_SetConfig+0xe4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01b      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347c:	d017      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <TIM_Base_SetConfig+0xe8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <TIM_Base_SetConfig+0xec>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00f      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a20      	ldr	r2, [pc, #128]	; (8003514 <TIM_Base_SetConfig+0xf0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00b      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <TIM_Base_SetConfig+0xf4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a1e      	ldr	r2, [pc, #120]	; (800351c <TIM_Base_SetConfig+0xf8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_Base_SetConfig+0x8a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <TIM_Base_SetConfig+0xfc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a08      	ldr	r2, [pc, #32]	; (8003508 <TIM_Base_SetConfig+0xe4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	615a      	str	r2, [r3, #20]
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800
 8003514:	40000c00 	.word	0x40000c00
 8003518:	40014000 	.word	0x40014000
 800351c:	40014400 	.word	0x40014400
 8003520:	40014800 	.word	0x40014800

08003524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f023 0302 	bic.w	r3, r3, #2
 800356c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <TIM_OC1_SetConfig+0xc8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10c      	bne.n	800359a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0308 	bic.w	r3, r3, #8
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <TIM_OC1_SetConfig+0xc8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d111      	bne.n	80035c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40010000 	.word	0x40010000

080035f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f023 0210 	bic.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0320 	bic.w	r3, r3, #32
 800363a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <TIM_OC2_SetConfig+0xd4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10d      	bne.n	800366c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <TIM_OC2_SetConfig+0xd4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d113      	bne.n	800369c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800367a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000

080036c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <TIM_OC3_SetConfig+0xd0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10d      	bne.n	8003742 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800372c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <TIM_OC3_SetConfig+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d113      	bne.n	8003772 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	621a      	str	r2, [r3, #32]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40010000 	.word	0x40010000

0800379c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	031b      	lsls	r3, r3, #12
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a10      	ldr	r2, [pc, #64]	; (8003838 <TIM_OC4_SetConfig+0x9c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d109      	bne.n	8003810 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000

0800383c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 030a 	bic.w	r3, r3, #10
 8003878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389a:	b480      	push	{r7}
 800389c:	b087      	sub	sp, #28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0210 	bic.w	r2, r3, #16
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	031b      	lsls	r3, r3, #12
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	f043 0307 	orr.w	r3, r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	431a      	orrs	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2201      	movs	r2, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	431a      	orrs	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e050      	b.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d013      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10c      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40014000 	.word	0x40014000

08003a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e03f      	b.n	8003b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd f8d8 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fcbf 	bl	8004460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d130      	bne.n	8003bae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_UART_Transmit_IT+0x26>
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e029      	b.n	8003bb0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Transmit_IT+0x38>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e022      	b.n	8003bb0 <HAL_UART_Transmit_IT+0x7e>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	88fa      	ldrh	r2, [r7, #6]
 8003b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2221      	movs	r2, #33	; 0x21
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ba8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b0ba      	sub	sp, #232	; 0xe8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_UART_IRQHandler+0x66>
 8003c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fb65 	bl	80042ea <UART_Receive_IT>
      return;
 8003c20:	e256      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80de 	beq.w	8003de8 <HAL_UART_IRQHandler+0x22c>
 8003c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80d1 	beq.w	8003de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_UART_IRQHandler+0xae>
 8003c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xd2>
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0202 	orr.w	r2, r3, #2
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xf6>
 8003c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x126>
 8003cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0208 	orr.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 81ed 	beq.w	80040c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_UART_IRQHandler+0x14e>
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 faf0 	bl	80042ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <HAL_UART_IRQHandler+0x17a>
 8003d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04f      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9f8 	bl	800412c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	d141      	bne.n	8003dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1d9      	bne.n	8003d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d013      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4a7d      	ldr	r2, [pc, #500]	; (8003f98 <HAL_UART_IRQHandler+0x3dc>)
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd ff54 	bl	8001c58 <HAL_DMA_Abort_IT>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	e00e      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f99a 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e00a      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f996 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e006      	b.n	8003de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f992 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003de2:	e170      	b.n	80040c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	bf00      	nop
    return;
 8003de6:	e16e      	b.n	80040c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	f040 814a 	bne.w	8004086 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8143 	beq.w	8004086 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 813c 	beq.w	8004086 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	f040 80b4 	bne.w	8003f9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8140 	beq.w	80040ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e52:	429a      	cmp	r2, r3
 8003e54:	f080 8139 	bcs.w	80040ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6a:	f000 8088 	beq.w	8003f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1d9      	bne.n	8003e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e1      	bne.n	8003eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	f023 0310 	bic.w	r3, r3, #16
 8003f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fdfd 	bl	8001b78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8c0 	bl	8004114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f94:	e099      	b.n	80040ca <HAL_UART_IRQHandler+0x50e>
 8003f96:	bf00      	nop
 8003f98:	080041f3 	.word	0x080041f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 808b 	beq.w	80040ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8086 	beq.w	80040ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8003fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e3      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	623b      	str	r3, [r7, #32]
   return(result);
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800401e:	633a      	str	r2, [r7, #48]	; 0x30
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e3      	bne.n	8003ffa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004064:	61fa      	str	r2, [r7, #28]
 8004066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	617b      	str	r3, [r7, #20]
   return(result);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e3      	bne.n	8004040 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f848 	bl	8004114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004084:	e023      	b.n	80040ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_UART_IRQHandler+0x4ea>
 8004092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8bb 	bl	800421a <UART_Transmit_IT>
    return;
 80040a4:	e014      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <HAL_UART_IRQHandler+0x514>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8fb 	bl	80042ba <UART_EndTransmit_IT>
    return;
 80040c4:	e004      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
    return;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_UART_IRQHandler+0x514>
      return;
 80040ce:	bf00      	nop
  }
}
 80040d0:	37e8      	adds	r7, #232	; 0xe8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop

080040d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b095      	sub	sp, #84	; 0x54
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004154:	643a      	str	r2, [r7, #64]	; 0x40
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800415a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e5      	bne.n	8004134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	61fb      	str	r3, [r7, #28]
   return(result);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004188:	62fa      	str	r2, [r7, #44]	; 0x2c
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d119      	bne.n	80041d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f023 0310 	bic.w	r3, r3, #16
 80041ba:	647b      	str	r3, [r7, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041c4:	61ba      	str	r2, [r7, #24]
 80041c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6979      	ldr	r1, [r7, #20]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	613b      	str	r3, [r7, #16]
   return(result);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e5      	bne.n	80041a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041e6:	bf00      	nop
 80041e8:	3754      	adds	r7, #84	; 0x54
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff ff77 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b21      	cmp	r3, #33	; 0x21
 800422c:	d13e      	bne.n	80042ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004236:	d114      	bne.n	8004262 <UART_Transmit_IT+0x48>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	e008      	b.n	8004274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	1c59      	adds	r1, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6211      	str	r1, [r2, #32]
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fefc 	bl	80040d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b08c      	sub	sp, #48	; 0x30
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b22      	cmp	r3, #34	; 0x22
 80042fc:	f040 80ab 	bne.w	8004456 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d117      	bne.n	800433a <UART_Receive_IT+0x50>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d113      	bne.n	800433a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004328:	b29a      	uxth	r2, r3
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
 8004338:	e026      	b.n	8004388 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d007      	beq.n	800435e <UART_Receive_IT+0x74>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <UART_Receive_IT+0x82>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e008      	b.n	800437e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004378:	b2da      	uxtb	r2, r3
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4619      	mov	r1, r3
 8004396:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004398:	2b00      	cmp	r3, #0
 800439a:	d15a      	bne.n	8004452 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0220 	bic.w	r2, r2, #32
 80043aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d135      	bne.n	8004448 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	613b      	str	r3, [r7, #16]
   return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f023 0310 	bic.w	r3, r3, #16
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	623a      	str	r2, [r7, #32]
 8004404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b10      	cmp	r3, #16
 8004422:	d10a      	bne.n	800443a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fe67 	bl	8004114 <HAL_UARTEx_RxEventCallback>
 8004446:	e002      	b.n	800444e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fe4f 	bl	80040ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e002      	b.n	8004458 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e000      	b.n	8004458 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	3730      	adds	r7, #48	; 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	b09f      	sub	sp, #124	; 0x7c
 8004466:	af00      	add	r7, sp, #0
 8004468:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	68d9      	ldr	r1, [r3, #12]
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	ea40 0301 	orr.w	r3, r0, r1
 8004480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	431a      	orrs	r2, r3
 8004492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	4313      	orrs	r3, r2
 8004498:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044a4:	f021 010c 	bic.w	r1, r1, #12
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ae:	430b      	orrs	r3, r1
 80044b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	6999      	ldr	r1, [r3, #24]
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4bc5      	ldr	r3, [pc, #788]	; (80047e4 <UART_SetConfig+0x384>)
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d004      	beq.n	80044de <UART_SetConfig+0x7e>
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4bc3      	ldr	r3, [pc, #780]	; (80047e8 <UART_SetConfig+0x388>)
 80044da:	429a      	cmp	r2, r3
 80044dc:	d103      	bne.n	80044e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044de:	f7fe fc5d 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 80044e2:	6778      	str	r0, [r7, #116]	; 0x74
 80044e4:	e002      	b.n	80044ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044e6:	f7fe fc45 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 80044ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	f040 80b6 	bne.w	8004664 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044fa:	461c      	mov	r4, r3
 80044fc:	f04f 0500 	mov.w	r5, #0
 8004500:	4622      	mov	r2, r4
 8004502:	462b      	mov	r3, r5
 8004504:	1891      	adds	r1, r2, r2
 8004506:	6439      	str	r1, [r7, #64]	; 0x40
 8004508:	415b      	adcs	r3, r3
 800450a:	647b      	str	r3, [r7, #68]	; 0x44
 800450c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004510:	1912      	adds	r2, r2, r4
 8004512:	eb45 0303 	adc.w	r3, r5, r3
 8004516:	f04f 0000 	mov.w	r0, #0
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	00d9      	lsls	r1, r3, #3
 8004520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004524:	00d0      	lsls	r0, r2, #3
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1911      	adds	r1, r2, r4
 800452c:	6639      	str	r1, [r7, #96]	; 0x60
 800452e:	416b      	adcs	r3, r5
 8004530:	667b      	str	r3, [r7, #100]	; 0x64
 8004532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	1891      	adds	r1, r2, r2
 800453e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004540:	415b      	adcs	r3, r3
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004548:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800454c:	f7fb fe98 	bl	8000280 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4ba5      	ldr	r3, [pc, #660]	; (80047ec <UART_SetConfig+0x38c>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011e      	lsls	r6, r3, #4
 800455e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004560:	461c      	mov	r4, r3
 8004562:	f04f 0500 	mov.w	r5, #0
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	1891      	adds	r1, r2, r2
 800456c:	6339      	str	r1, [r7, #48]	; 0x30
 800456e:	415b      	adcs	r3, r3
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
 8004572:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004576:	1912      	adds	r2, r2, r4
 8004578:	eb45 0303 	adc.w	r3, r5, r3
 800457c:	f04f 0000 	mov.w	r0, #0
 8004580:	f04f 0100 	mov.w	r1, #0
 8004584:	00d9      	lsls	r1, r3, #3
 8004586:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800458a:	00d0      	lsls	r0, r2, #3
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	1911      	adds	r1, r2, r4
 8004592:	65b9      	str	r1, [r7, #88]	; 0x58
 8004594:	416b      	adcs	r3, r5
 8004596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	461a      	mov	r2, r3
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80045a6:	415b      	adcs	r3, r3
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045b2:	f7fb fe65 	bl	8000280 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4b8c      	ldr	r3, [pc, #560]	; (80047ec <UART_SetConfig+0x38c>)
 80045bc:	fba3 1302 	umull	r1, r3, r3, r2
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	2164      	movs	r1, #100	; 0x64
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	3332      	adds	r3, #50	; 0x32
 80045ce:	4a87      	ldr	r2, [pc, #540]	; (80047ec <UART_SetConfig+0x38c>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045dc:	441e      	add	r6, r3
 80045de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e0:	4618      	mov	r0, r3
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	1894      	adds	r4, r2, r2
 80045ec:	623c      	str	r4, [r7, #32]
 80045ee:	415b      	adcs	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045f6:	1812      	adds	r2, r2, r0
 80045f8:	eb41 0303 	adc.w	r3, r1, r3
 80045fc:	f04f 0400 	mov.w	r4, #0
 8004600:	f04f 0500 	mov.w	r5, #0
 8004604:	00dd      	lsls	r5, r3, #3
 8004606:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800460a:	00d4      	lsls	r4, r2, #3
 800460c:	4622      	mov	r2, r4
 800460e:	462b      	mov	r3, r5
 8004610:	1814      	adds	r4, r2, r0
 8004612:	653c      	str	r4, [r7, #80]	; 0x50
 8004614:	414b      	adcs	r3, r1
 8004616:	657b      	str	r3, [r7, #84]	; 0x54
 8004618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	461a      	mov	r2, r3
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	1891      	adds	r1, r2, r2
 8004624:	61b9      	str	r1, [r7, #24]
 8004626:	415b      	adcs	r3, r3
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800462e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004632:	f7fb fe25 	bl	8000280 <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4b6c      	ldr	r3, [pc, #432]	; (80047ec <UART_SetConfig+0x38c>)
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2164      	movs	r1, #100	; 0x64
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	3332      	adds	r3, #50	; 0x32
 800464e:	4a67      	ldr	r2, [pc, #412]	; (80047ec <UART_SetConfig+0x38c>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 0207 	and.w	r2, r3, #7
 800465a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4432      	add	r2, r6
 8004660:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004662:	e0b9      	b.n	80047d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004666:	461c      	mov	r4, r3
 8004668:	f04f 0500 	mov.w	r5, #0
 800466c:	4622      	mov	r2, r4
 800466e:	462b      	mov	r3, r5
 8004670:	1891      	adds	r1, r2, r2
 8004672:	6139      	str	r1, [r7, #16]
 8004674:	415b      	adcs	r3, r3
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800467c:	1912      	adds	r2, r2, r4
 800467e:	eb45 0303 	adc.w	r3, r5, r3
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	00d9      	lsls	r1, r3, #3
 800468c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004690:	00d0      	lsls	r0, r2, #3
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	eb12 0804 	adds.w	r8, r2, r4
 800469a:	eb43 0905 	adc.w	r9, r3, r5
 800469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	008b      	lsls	r3, r1, #2
 80046b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046b6:	0082      	lsls	r2, r0, #2
 80046b8:	4640      	mov	r0, r8
 80046ba:	4649      	mov	r1, r9
 80046bc:	f7fb fde0 	bl	8000280 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4b49      	ldr	r3, [pc, #292]	; (80047ec <UART_SetConfig+0x38c>)
 80046c6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	011e      	lsls	r6, r3, #4
 80046ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d0:	4618      	mov	r0, r3
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	1894      	adds	r4, r2, r2
 80046dc:	60bc      	str	r4, [r7, #8]
 80046de:	415b      	adcs	r3, r3
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e6:	1812      	adds	r2, r2, r0
 80046e8:	eb41 0303 	adc.w	r3, r1, r3
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	f04f 0500 	mov.w	r5, #0
 80046f4:	00dd      	lsls	r5, r3, #3
 80046f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046fa:	00d4      	lsls	r4, r2, #3
 80046fc:	4622      	mov	r2, r4
 80046fe:	462b      	mov	r3, r5
 8004700:	1814      	adds	r4, r2, r0
 8004702:	64bc      	str	r4, [r7, #72]	; 0x48
 8004704:	414b      	adcs	r3, r1
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4618      	mov	r0, r3
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	008b      	lsls	r3, r1, #2
 800471c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004720:	0082      	lsls	r2, r0, #2
 8004722:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004726:	f7fb fdab 	bl	8000280 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <UART_SetConfig+0x38c>)
 8004730:	fba3 1302 	umull	r1, r3, r3, r2
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	2164      	movs	r1, #100	; 0x64
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	3332      	adds	r3, #50	; 0x32
 8004742:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <UART_SetConfig+0x38c>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474e:	441e      	add	r6, r3
 8004750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004752:	4618      	mov	r0, r3
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	1894      	adds	r4, r2, r2
 800475e:	603c      	str	r4, [r7, #0]
 8004760:	415b      	adcs	r3, r3
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004768:	1812      	adds	r2, r2, r0
 800476a:	eb41 0303 	adc.w	r3, r1, r3
 800476e:	f04f 0400 	mov.w	r4, #0
 8004772:	f04f 0500 	mov.w	r5, #0
 8004776:	00dd      	lsls	r5, r3, #3
 8004778:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800477c:	00d4      	lsls	r4, r2, #3
 800477e:	4622      	mov	r2, r4
 8004780:	462b      	mov	r3, r5
 8004782:	eb12 0a00 	adds.w	sl, r2, r0
 8004786:	eb43 0b01 	adc.w	fp, r3, r1
 800478a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	008b      	lsls	r3, r1, #2
 800479e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047a2:	0082      	lsls	r2, r0, #2
 80047a4:	4650      	mov	r0, sl
 80047a6:	4659      	mov	r1, fp
 80047a8:	f7fb fd6a 	bl	8000280 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <UART_SetConfig+0x38c>)
 80047b2:	fba3 1302 	umull	r1, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	2164      	movs	r1, #100	; 0x64
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	3332      	adds	r3, #50	; 0x32
 80047c4:	4a09      	ldr	r2, [pc, #36]	; (80047ec <UART_SetConfig+0x38c>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4432      	add	r2, r6
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	377c      	adds	r7, #124	; 0x7c
 80047dc:	46bd      	mov	sp, r7
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	bf00      	nop
 80047e4:	40011000 	.word	0x40011000
 80047e8:	40011400 	.word	0x40011400
 80047ec:	51eb851f 	.word	0x51eb851f

080047f0 <__errno>:
 80047f0:	4b01      	ldr	r3, [pc, #4]	; (80047f8 <__errno+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	2000000c 	.word	0x2000000c

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	; (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	; (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	; (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	; (8004840 <__libc_init_array+0x44>)
 8004810:	f000 fc4e 	bl	80050b0 <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	0800512c 	.word	0x0800512c
 8004838:	0800512c 	.word	0x0800512c
 800483c:	0800512c 	.word	0x0800512c
 8004840:	08005130 	.word	0x08005130

08004844 <memset>:
 8004844:	4402      	add	r2, r0
 8004846:	4603      	mov	r3, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	d100      	bne.n	800484e <memset+0xa>
 800484c:	4770      	bx	lr
 800484e:	f803 1b01 	strb.w	r1, [r3], #1
 8004852:	e7f9      	b.n	8004848 <memset+0x4>

08004854 <siprintf>:
 8004854:	b40e      	push	{r1, r2, r3}
 8004856:	b500      	push	{lr}
 8004858:	b09c      	sub	sp, #112	; 0x70
 800485a:	ab1d      	add	r3, sp, #116	; 0x74
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	9006      	str	r0, [sp, #24]
 8004860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004864:	4809      	ldr	r0, [pc, #36]	; (800488c <siprintf+0x38>)
 8004866:	9107      	str	r1, [sp, #28]
 8004868:	9104      	str	r1, [sp, #16]
 800486a:	4909      	ldr	r1, [pc, #36]	; (8004890 <siprintf+0x3c>)
 800486c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004870:	9105      	str	r1, [sp, #20]
 8004872:	6800      	ldr	r0, [r0, #0]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	a902      	add	r1, sp, #8
 8004878:	f000 f868 	bl	800494c <_svfiprintf_r>
 800487c:	9b02      	ldr	r3, [sp, #8]
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	b01c      	add	sp, #112	; 0x70
 8004884:	f85d eb04 	ldr.w	lr, [sp], #4
 8004888:	b003      	add	sp, #12
 800488a:	4770      	bx	lr
 800488c:	2000000c 	.word	0x2000000c
 8004890:	ffff0208 	.word	0xffff0208

08004894 <__ssputs_r>:
 8004894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	688e      	ldr	r6, [r1, #8]
 800489a:	429e      	cmp	r6, r3
 800489c:	4682      	mov	sl, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	4690      	mov	r8, r2
 80048a2:	461f      	mov	r7, r3
 80048a4:	d838      	bhi.n	8004918 <__ssputs_r+0x84>
 80048a6:	898a      	ldrh	r2, [r1, #12]
 80048a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048ac:	d032      	beq.n	8004914 <__ssputs_r+0x80>
 80048ae:	6825      	ldr	r5, [r4, #0]
 80048b0:	6909      	ldr	r1, [r1, #16]
 80048b2:	eba5 0901 	sub.w	r9, r5, r1
 80048b6:	6965      	ldr	r5, [r4, #20]
 80048b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048c0:	3301      	adds	r3, #1
 80048c2:	444b      	add	r3, r9
 80048c4:	106d      	asrs	r5, r5, #1
 80048c6:	429d      	cmp	r5, r3
 80048c8:	bf38      	it	cc
 80048ca:	461d      	movcc	r5, r3
 80048cc:	0553      	lsls	r3, r2, #21
 80048ce:	d531      	bpl.n	8004934 <__ssputs_r+0xa0>
 80048d0:	4629      	mov	r1, r5
 80048d2:	f000 fb47 	bl	8004f64 <_malloc_r>
 80048d6:	4606      	mov	r6, r0
 80048d8:	b950      	cbnz	r0, 80048f0 <__ssputs_r+0x5c>
 80048da:	230c      	movs	r3, #12
 80048dc:	f8ca 3000 	str.w	r3, [sl]
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f0:	6921      	ldr	r1, [r4, #16]
 80048f2:	464a      	mov	r2, r9
 80048f4:	f000 fabe 	bl	8004e74 <memcpy>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	6126      	str	r6, [r4, #16]
 8004906:	6165      	str	r5, [r4, #20]
 8004908:	444e      	add	r6, r9
 800490a:	eba5 0509 	sub.w	r5, r5, r9
 800490e:	6026      	str	r6, [r4, #0]
 8004910:	60a5      	str	r5, [r4, #8]
 8004912:	463e      	mov	r6, r7
 8004914:	42be      	cmp	r6, r7
 8004916:	d900      	bls.n	800491a <__ssputs_r+0x86>
 8004918:	463e      	mov	r6, r7
 800491a:	4632      	mov	r2, r6
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4641      	mov	r1, r8
 8004920:	f000 fab6 	bl	8004e90 <memmove>
 8004924:	68a3      	ldr	r3, [r4, #8]
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	1b9b      	subs	r3, r3, r6
 800492a:	4432      	add	r2, r6
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	6022      	str	r2, [r4, #0]
 8004930:	2000      	movs	r0, #0
 8004932:	e7db      	b.n	80048ec <__ssputs_r+0x58>
 8004934:	462a      	mov	r2, r5
 8004936:	f000 fb6f 	bl	8005018 <_realloc_r>
 800493a:	4606      	mov	r6, r0
 800493c:	2800      	cmp	r0, #0
 800493e:	d1e1      	bne.n	8004904 <__ssputs_r+0x70>
 8004940:	6921      	ldr	r1, [r4, #16]
 8004942:	4650      	mov	r0, sl
 8004944:	f000 fabe 	bl	8004ec4 <_free_r>
 8004948:	e7c7      	b.n	80048da <__ssputs_r+0x46>
	...

0800494c <_svfiprintf_r>:
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	4698      	mov	r8, r3
 8004952:	898b      	ldrh	r3, [r1, #12]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	b09d      	sub	sp, #116	; 0x74
 8004958:	4607      	mov	r7, r0
 800495a:	460d      	mov	r5, r1
 800495c:	4614      	mov	r4, r2
 800495e:	d50e      	bpl.n	800497e <_svfiprintf_r+0x32>
 8004960:	690b      	ldr	r3, [r1, #16]
 8004962:	b963      	cbnz	r3, 800497e <_svfiprintf_r+0x32>
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	f000 fafd 	bl	8004f64 <_malloc_r>
 800496a:	6028      	str	r0, [r5, #0]
 800496c:	6128      	str	r0, [r5, #16]
 800496e:	b920      	cbnz	r0, 800497a <_svfiprintf_r+0x2e>
 8004970:	230c      	movs	r3, #12
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	e0d1      	b.n	8004b1e <_svfiprintf_r+0x1d2>
 800497a:	2340      	movs	r3, #64	; 0x40
 800497c:	616b      	str	r3, [r5, #20]
 800497e:	2300      	movs	r3, #0
 8004980:	9309      	str	r3, [sp, #36]	; 0x24
 8004982:	2320      	movs	r3, #32
 8004984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004988:	f8cd 800c 	str.w	r8, [sp, #12]
 800498c:	2330      	movs	r3, #48	; 0x30
 800498e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b38 <_svfiprintf_r+0x1ec>
 8004992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004996:	f04f 0901 	mov.w	r9, #1
 800499a:	4623      	mov	r3, r4
 800499c:	469a      	mov	sl, r3
 800499e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049a2:	b10a      	cbz	r2, 80049a8 <_svfiprintf_r+0x5c>
 80049a4:	2a25      	cmp	r2, #37	; 0x25
 80049a6:	d1f9      	bne.n	800499c <_svfiprintf_r+0x50>
 80049a8:	ebba 0b04 	subs.w	fp, sl, r4
 80049ac:	d00b      	beq.n	80049c6 <_svfiprintf_r+0x7a>
 80049ae:	465b      	mov	r3, fp
 80049b0:	4622      	mov	r2, r4
 80049b2:	4629      	mov	r1, r5
 80049b4:	4638      	mov	r0, r7
 80049b6:	f7ff ff6d 	bl	8004894 <__ssputs_r>
 80049ba:	3001      	adds	r0, #1
 80049bc:	f000 80aa 	beq.w	8004b14 <_svfiprintf_r+0x1c8>
 80049c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049c2:	445a      	add	r2, fp
 80049c4:	9209      	str	r2, [sp, #36]	; 0x24
 80049c6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80a2 	beq.w	8004b14 <_svfiprintf_r+0x1c8>
 80049d0:	2300      	movs	r3, #0
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295
 80049d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049da:	f10a 0a01 	add.w	sl, sl, #1
 80049de:	9304      	str	r3, [sp, #16]
 80049e0:	9307      	str	r3, [sp, #28]
 80049e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049e6:	931a      	str	r3, [sp, #104]	; 0x68
 80049e8:	4654      	mov	r4, sl
 80049ea:	2205      	movs	r2, #5
 80049ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f0:	4851      	ldr	r0, [pc, #324]	; (8004b38 <_svfiprintf_r+0x1ec>)
 80049f2:	f7fb fbf5 	bl	80001e0 <memchr>
 80049f6:	9a04      	ldr	r2, [sp, #16]
 80049f8:	b9d8      	cbnz	r0, 8004a32 <_svfiprintf_r+0xe6>
 80049fa:	06d0      	lsls	r0, r2, #27
 80049fc:	bf44      	itt	mi
 80049fe:	2320      	movmi	r3, #32
 8004a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a04:	0711      	lsls	r1, r2, #28
 8004a06:	bf44      	itt	mi
 8004a08:	232b      	movmi	r3, #43	; 0x2b
 8004a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a12:	2b2a      	cmp	r3, #42	; 0x2a
 8004a14:	d015      	beq.n	8004a42 <_svfiprintf_r+0xf6>
 8004a16:	9a07      	ldr	r2, [sp, #28]
 8004a18:	4654      	mov	r4, sl
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f04f 0c0a 	mov.w	ip, #10
 8004a20:	4621      	mov	r1, r4
 8004a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a26:	3b30      	subs	r3, #48	; 0x30
 8004a28:	2b09      	cmp	r3, #9
 8004a2a:	d94e      	bls.n	8004aca <_svfiprintf_r+0x17e>
 8004a2c:	b1b0      	cbz	r0, 8004a5c <_svfiprintf_r+0x110>
 8004a2e:	9207      	str	r2, [sp, #28]
 8004a30:	e014      	b.n	8004a5c <_svfiprintf_r+0x110>
 8004a32:	eba0 0308 	sub.w	r3, r0, r8
 8004a36:	fa09 f303 	lsl.w	r3, r9, r3
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	9304      	str	r3, [sp, #16]
 8004a3e:	46a2      	mov	sl, r4
 8004a40:	e7d2      	b.n	80049e8 <_svfiprintf_r+0x9c>
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	1d19      	adds	r1, r3, #4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	9103      	str	r1, [sp, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfbb      	ittet	lt
 8004a4e:	425b      	neglt	r3, r3
 8004a50:	f042 0202 	orrlt.w	r2, r2, #2
 8004a54:	9307      	strge	r3, [sp, #28]
 8004a56:	9307      	strlt	r3, [sp, #28]
 8004a58:	bfb8      	it	lt
 8004a5a:	9204      	strlt	r2, [sp, #16]
 8004a5c:	7823      	ldrb	r3, [r4, #0]
 8004a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a60:	d10c      	bne.n	8004a7c <_svfiprintf_r+0x130>
 8004a62:	7863      	ldrb	r3, [r4, #1]
 8004a64:	2b2a      	cmp	r3, #42	; 0x2a
 8004a66:	d135      	bne.n	8004ad4 <_svfiprintf_r+0x188>
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	9203      	str	r2, [sp, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bfb8      	it	lt
 8004a74:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a78:	3402      	adds	r4, #2
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b48 <_svfiprintf_r+0x1fc>
 8004a80:	7821      	ldrb	r1, [r4, #0]
 8004a82:	2203      	movs	r2, #3
 8004a84:	4650      	mov	r0, sl
 8004a86:	f7fb fbab 	bl	80001e0 <memchr>
 8004a8a:	b140      	cbz	r0, 8004a9e <_svfiprintf_r+0x152>
 8004a8c:	2340      	movs	r3, #64	; 0x40
 8004a8e:	eba0 000a 	sub.w	r0, r0, sl
 8004a92:	fa03 f000 	lsl.w	r0, r3, r0
 8004a96:	9b04      	ldr	r3, [sp, #16]
 8004a98:	4303      	orrs	r3, r0
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	9304      	str	r3, [sp, #16]
 8004a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa2:	4826      	ldr	r0, [pc, #152]	; (8004b3c <_svfiprintf_r+0x1f0>)
 8004aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aa8:	2206      	movs	r2, #6
 8004aaa:	f7fb fb99 	bl	80001e0 <memchr>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d038      	beq.n	8004b24 <_svfiprintf_r+0x1d8>
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <_svfiprintf_r+0x1f4>)
 8004ab4:	bb1b      	cbnz	r3, 8004afe <_svfiprintf_r+0x1b2>
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	3307      	adds	r3, #7
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	3308      	adds	r3, #8
 8004ac0:	9303      	str	r3, [sp, #12]
 8004ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac4:	4433      	add	r3, r6
 8004ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac8:	e767      	b.n	800499a <_svfiprintf_r+0x4e>
 8004aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ace:	460c      	mov	r4, r1
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	e7a5      	b.n	8004a20 <_svfiprintf_r+0xd4>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	3401      	adds	r4, #1
 8004ad8:	9305      	str	r3, [sp, #20]
 8004ada:	4619      	mov	r1, r3
 8004adc:	f04f 0c0a 	mov.w	ip, #10
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ae6:	3a30      	subs	r2, #48	; 0x30
 8004ae8:	2a09      	cmp	r2, #9
 8004aea:	d903      	bls.n	8004af4 <_svfiprintf_r+0x1a8>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0c5      	beq.n	8004a7c <_svfiprintf_r+0x130>
 8004af0:	9105      	str	r1, [sp, #20]
 8004af2:	e7c3      	b.n	8004a7c <_svfiprintf_r+0x130>
 8004af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004af8:	4604      	mov	r4, r0
 8004afa:	2301      	movs	r3, #1
 8004afc:	e7f0      	b.n	8004ae0 <_svfiprintf_r+0x194>
 8004afe:	ab03      	add	r3, sp, #12
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	462a      	mov	r2, r5
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <_svfiprintf_r+0x1f8>)
 8004b06:	a904      	add	r1, sp, #16
 8004b08:	4638      	mov	r0, r7
 8004b0a:	f3af 8000 	nop.w
 8004b0e:	1c42      	adds	r2, r0, #1
 8004b10:	4606      	mov	r6, r0
 8004b12:	d1d6      	bne.n	8004ac2 <_svfiprintf_r+0x176>
 8004b14:	89ab      	ldrh	r3, [r5, #12]
 8004b16:	065b      	lsls	r3, r3, #25
 8004b18:	f53f af2c 	bmi.w	8004974 <_svfiprintf_r+0x28>
 8004b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b1e:	b01d      	add	sp, #116	; 0x74
 8004b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <_svfiprintf_r+0x1f8>)
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f000 f87a 	bl	8004c28 <_printf_i>
 8004b34:	e7eb      	b.n	8004b0e <_svfiprintf_r+0x1c2>
 8004b36:	bf00      	nop
 8004b38:	080050f0 	.word	0x080050f0
 8004b3c:	080050fa 	.word	0x080050fa
 8004b40:	00000000 	.word	0x00000000
 8004b44:	08004895 	.word	0x08004895
 8004b48:	080050f6 	.word	0x080050f6

08004b4c <_printf_common>:
 8004b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b50:	4616      	mov	r6, r2
 8004b52:	4699      	mov	r9, r3
 8004b54:	688a      	ldr	r2, [r1, #8]
 8004b56:	690b      	ldr	r3, [r1, #16]
 8004b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	bfb8      	it	lt
 8004b60:	4613      	movlt	r3, r2
 8004b62:	6033      	str	r3, [r6, #0]
 8004b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b68:	4607      	mov	r7, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	b10a      	cbz	r2, 8004b72 <_printf_common+0x26>
 8004b6e:	3301      	adds	r3, #1
 8004b70:	6033      	str	r3, [r6, #0]
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	0699      	lsls	r1, r3, #26
 8004b76:	bf42      	ittt	mi
 8004b78:	6833      	ldrmi	r3, [r6, #0]
 8004b7a:	3302      	addmi	r3, #2
 8004b7c:	6033      	strmi	r3, [r6, #0]
 8004b7e:	6825      	ldr	r5, [r4, #0]
 8004b80:	f015 0506 	ands.w	r5, r5, #6
 8004b84:	d106      	bne.n	8004b94 <_printf_common+0x48>
 8004b86:	f104 0a19 	add.w	sl, r4, #25
 8004b8a:	68e3      	ldr	r3, [r4, #12]
 8004b8c:	6832      	ldr	r2, [r6, #0]
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	42ab      	cmp	r3, r5
 8004b92:	dc26      	bgt.n	8004be2 <_printf_common+0x96>
 8004b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b98:	1e13      	subs	r3, r2, #0
 8004b9a:	6822      	ldr	r2, [r4, #0]
 8004b9c:	bf18      	it	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	0692      	lsls	r2, r2, #26
 8004ba2:	d42b      	bmi.n	8004bfc <_printf_common+0xb0>
 8004ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4638      	mov	r0, r7
 8004bac:	47c0      	blx	r8
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d01e      	beq.n	8004bf0 <_printf_common+0xa4>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	68e5      	ldr	r5, [r4, #12]
 8004bb6:	6832      	ldr	r2, [r6, #0]
 8004bb8:	f003 0306 	and.w	r3, r3, #6
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	bf08      	it	eq
 8004bc0:	1aad      	subeq	r5, r5, r2
 8004bc2:	68a3      	ldr	r3, [r4, #8]
 8004bc4:	6922      	ldr	r2, [r4, #16]
 8004bc6:	bf0c      	ite	eq
 8004bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bcc:	2500      	movne	r5, #0
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	bfc4      	itt	gt
 8004bd2:	1a9b      	subgt	r3, r3, r2
 8004bd4:	18ed      	addgt	r5, r5, r3
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	341a      	adds	r4, #26
 8004bda:	42b5      	cmp	r5, r6
 8004bdc:	d11a      	bne.n	8004c14 <_printf_common+0xc8>
 8004bde:	2000      	movs	r0, #0
 8004be0:	e008      	b.n	8004bf4 <_printf_common+0xa8>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4652      	mov	r2, sl
 8004be6:	4649      	mov	r1, r9
 8004be8:	4638      	mov	r0, r7
 8004bea:	47c0      	blx	r8
 8004bec:	3001      	adds	r0, #1
 8004bee:	d103      	bne.n	8004bf8 <_printf_common+0xac>
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	e7c6      	b.n	8004b8a <_printf_common+0x3e>
 8004bfc:	18e1      	adds	r1, r4, r3
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	2030      	movs	r0, #48	; 0x30
 8004c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c06:	4422      	add	r2, r4
 8004c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c10:	3302      	adds	r3, #2
 8004c12:	e7c7      	b.n	8004ba4 <_printf_common+0x58>
 8004c14:	2301      	movs	r3, #1
 8004c16:	4622      	mov	r2, r4
 8004c18:	4649      	mov	r1, r9
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c0      	blx	r8
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d0e6      	beq.n	8004bf0 <_printf_common+0xa4>
 8004c22:	3601      	adds	r6, #1
 8004c24:	e7d9      	b.n	8004bda <_printf_common+0x8e>
	...

08004c28 <_printf_i>:
 8004c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4691      	mov	r9, r2
 8004c30:	7e27      	ldrb	r7, [r4, #24]
 8004c32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c34:	2f78      	cmp	r7, #120	; 0x78
 8004c36:	4680      	mov	r8, r0
 8004c38:	469a      	mov	sl, r3
 8004c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c3e:	d807      	bhi.n	8004c50 <_printf_i+0x28>
 8004c40:	2f62      	cmp	r7, #98	; 0x62
 8004c42:	d80a      	bhi.n	8004c5a <_printf_i+0x32>
 8004c44:	2f00      	cmp	r7, #0
 8004c46:	f000 80d8 	beq.w	8004dfa <_printf_i+0x1d2>
 8004c4a:	2f58      	cmp	r7, #88	; 0x58
 8004c4c:	f000 80a3 	beq.w	8004d96 <_printf_i+0x16e>
 8004c50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c58:	e03a      	b.n	8004cd0 <_printf_i+0xa8>
 8004c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c5e:	2b15      	cmp	r3, #21
 8004c60:	d8f6      	bhi.n	8004c50 <_printf_i+0x28>
 8004c62:	a001      	add	r0, pc, #4	; (adr r0, 8004c68 <_printf_i+0x40>)
 8004c64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c68:	08004cc1 	.word	0x08004cc1
 8004c6c:	08004cd5 	.word	0x08004cd5
 8004c70:	08004c51 	.word	0x08004c51
 8004c74:	08004c51 	.word	0x08004c51
 8004c78:	08004c51 	.word	0x08004c51
 8004c7c:	08004c51 	.word	0x08004c51
 8004c80:	08004cd5 	.word	0x08004cd5
 8004c84:	08004c51 	.word	0x08004c51
 8004c88:	08004c51 	.word	0x08004c51
 8004c8c:	08004c51 	.word	0x08004c51
 8004c90:	08004c51 	.word	0x08004c51
 8004c94:	08004de1 	.word	0x08004de1
 8004c98:	08004d05 	.word	0x08004d05
 8004c9c:	08004dc3 	.word	0x08004dc3
 8004ca0:	08004c51 	.word	0x08004c51
 8004ca4:	08004c51 	.word	0x08004c51
 8004ca8:	08004e03 	.word	0x08004e03
 8004cac:	08004c51 	.word	0x08004c51
 8004cb0:	08004d05 	.word	0x08004d05
 8004cb4:	08004c51 	.word	0x08004c51
 8004cb8:	08004c51 	.word	0x08004c51
 8004cbc:	08004dcb 	.word	0x08004dcb
 8004cc0:	680b      	ldr	r3, [r1, #0]
 8004cc2:	1d1a      	adds	r2, r3, #4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	600a      	str	r2, [r1, #0]
 8004cc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0a3      	b.n	8004e1c <_printf_i+0x1f4>
 8004cd4:	6825      	ldr	r5, [r4, #0]
 8004cd6:	6808      	ldr	r0, [r1, #0]
 8004cd8:	062e      	lsls	r6, r5, #24
 8004cda:	f100 0304 	add.w	r3, r0, #4
 8004cde:	d50a      	bpl.n	8004cf6 <_printf_i+0xce>
 8004ce0:	6805      	ldr	r5, [r0, #0]
 8004ce2:	600b      	str	r3, [r1, #0]
 8004ce4:	2d00      	cmp	r5, #0
 8004ce6:	da03      	bge.n	8004cf0 <_printf_i+0xc8>
 8004ce8:	232d      	movs	r3, #45	; 0x2d
 8004cea:	426d      	negs	r5, r5
 8004cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf0:	485e      	ldr	r0, [pc, #376]	; (8004e6c <_printf_i+0x244>)
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	e019      	b.n	8004d2a <_printf_i+0x102>
 8004cf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cfa:	6805      	ldr	r5, [r0, #0]
 8004cfc:	600b      	str	r3, [r1, #0]
 8004cfe:	bf18      	it	ne
 8004d00:	b22d      	sxthne	r5, r5
 8004d02:	e7ef      	b.n	8004ce4 <_printf_i+0xbc>
 8004d04:	680b      	ldr	r3, [r1, #0]
 8004d06:	6825      	ldr	r5, [r4, #0]
 8004d08:	1d18      	adds	r0, r3, #4
 8004d0a:	6008      	str	r0, [r1, #0]
 8004d0c:	0628      	lsls	r0, r5, #24
 8004d0e:	d501      	bpl.n	8004d14 <_printf_i+0xec>
 8004d10:	681d      	ldr	r5, [r3, #0]
 8004d12:	e002      	b.n	8004d1a <_printf_i+0xf2>
 8004d14:	0669      	lsls	r1, r5, #25
 8004d16:	d5fb      	bpl.n	8004d10 <_printf_i+0xe8>
 8004d18:	881d      	ldrh	r5, [r3, #0]
 8004d1a:	4854      	ldr	r0, [pc, #336]	; (8004e6c <_printf_i+0x244>)
 8004d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d1e:	bf0c      	ite	eq
 8004d20:	2308      	moveq	r3, #8
 8004d22:	230a      	movne	r3, #10
 8004d24:	2100      	movs	r1, #0
 8004d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d2a:	6866      	ldr	r6, [r4, #4]
 8004d2c:	60a6      	str	r6, [r4, #8]
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	bfa2      	ittt	ge
 8004d32:	6821      	ldrge	r1, [r4, #0]
 8004d34:	f021 0104 	bicge.w	r1, r1, #4
 8004d38:	6021      	strge	r1, [r4, #0]
 8004d3a:	b90d      	cbnz	r5, 8004d40 <_printf_i+0x118>
 8004d3c:	2e00      	cmp	r6, #0
 8004d3e:	d04d      	beq.n	8004ddc <_printf_i+0x1b4>
 8004d40:	4616      	mov	r6, r2
 8004d42:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d46:	fb03 5711 	mls	r7, r3, r1, r5
 8004d4a:	5dc7      	ldrb	r7, [r0, r7]
 8004d4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d50:	462f      	mov	r7, r5
 8004d52:	42bb      	cmp	r3, r7
 8004d54:	460d      	mov	r5, r1
 8004d56:	d9f4      	bls.n	8004d42 <_printf_i+0x11a>
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d10b      	bne.n	8004d74 <_printf_i+0x14c>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	07df      	lsls	r7, r3, #31
 8004d60:	d508      	bpl.n	8004d74 <_printf_i+0x14c>
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	6861      	ldr	r1, [r4, #4]
 8004d66:	4299      	cmp	r1, r3
 8004d68:	bfde      	ittt	le
 8004d6a:	2330      	movle	r3, #48	; 0x30
 8004d6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d74:	1b92      	subs	r2, r2, r6
 8004d76:	6122      	str	r2, [r4, #16]
 8004d78:	f8cd a000 	str.w	sl, [sp]
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	aa03      	add	r2, sp, #12
 8004d80:	4621      	mov	r1, r4
 8004d82:	4640      	mov	r0, r8
 8004d84:	f7ff fee2 	bl	8004b4c <_printf_common>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d14c      	bne.n	8004e26 <_printf_i+0x1fe>
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	b004      	add	sp, #16
 8004d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d96:	4835      	ldr	r0, [pc, #212]	; (8004e6c <_printf_i+0x244>)
 8004d98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	680e      	ldr	r6, [r1, #0]
 8004da0:	061f      	lsls	r7, r3, #24
 8004da2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004da6:	600e      	str	r6, [r1, #0]
 8004da8:	d514      	bpl.n	8004dd4 <_printf_i+0x1ac>
 8004daa:	07d9      	lsls	r1, r3, #31
 8004dac:	bf44      	itt	mi
 8004dae:	f043 0320 	orrmi.w	r3, r3, #32
 8004db2:	6023      	strmi	r3, [r4, #0]
 8004db4:	b91d      	cbnz	r5, 8004dbe <_printf_i+0x196>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f023 0320 	bic.w	r3, r3, #32
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	e7b0      	b.n	8004d24 <_printf_i+0xfc>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	f043 0320 	orr.w	r3, r3, #32
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	2378      	movs	r3, #120	; 0x78
 8004dcc:	4828      	ldr	r0, [pc, #160]	; (8004e70 <_printf_i+0x248>)
 8004dce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dd2:	e7e3      	b.n	8004d9c <_printf_i+0x174>
 8004dd4:	065e      	lsls	r6, r3, #25
 8004dd6:	bf48      	it	mi
 8004dd8:	b2ad      	uxthmi	r5, r5
 8004dda:	e7e6      	b.n	8004daa <_printf_i+0x182>
 8004ddc:	4616      	mov	r6, r2
 8004dde:	e7bb      	b.n	8004d58 <_printf_i+0x130>
 8004de0:	680b      	ldr	r3, [r1, #0]
 8004de2:	6826      	ldr	r6, [r4, #0]
 8004de4:	6960      	ldr	r0, [r4, #20]
 8004de6:	1d1d      	adds	r5, r3, #4
 8004de8:	600d      	str	r5, [r1, #0]
 8004dea:	0635      	lsls	r5, r6, #24
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	d501      	bpl.n	8004df4 <_printf_i+0x1cc>
 8004df0:	6018      	str	r0, [r3, #0]
 8004df2:	e002      	b.n	8004dfa <_printf_i+0x1d2>
 8004df4:	0671      	lsls	r1, r6, #25
 8004df6:	d5fb      	bpl.n	8004df0 <_printf_i+0x1c8>
 8004df8:	8018      	strh	r0, [r3, #0]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6123      	str	r3, [r4, #16]
 8004dfe:	4616      	mov	r6, r2
 8004e00:	e7ba      	b.n	8004d78 <_printf_i+0x150>
 8004e02:	680b      	ldr	r3, [r1, #0]
 8004e04:	1d1a      	adds	r2, r3, #4
 8004e06:	600a      	str	r2, [r1, #0]
 8004e08:	681e      	ldr	r6, [r3, #0]
 8004e0a:	6862      	ldr	r2, [r4, #4]
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f7fb f9e6 	bl	80001e0 <memchr>
 8004e14:	b108      	cbz	r0, 8004e1a <_printf_i+0x1f2>
 8004e16:	1b80      	subs	r0, r0, r6
 8004e18:	6060      	str	r0, [r4, #4]
 8004e1a:	6863      	ldr	r3, [r4, #4]
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e24:	e7a8      	b.n	8004d78 <_printf_i+0x150>
 8004e26:	6923      	ldr	r3, [r4, #16]
 8004e28:	4632      	mov	r2, r6
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	47d0      	blx	sl
 8004e30:	3001      	adds	r0, #1
 8004e32:	d0ab      	beq.n	8004d8c <_printf_i+0x164>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	079b      	lsls	r3, r3, #30
 8004e38:	d413      	bmi.n	8004e62 <_printf_i+0x23a>
 8004e3a:	68e0      	ldr	r0, [r4, #12]
 8004e3c:	9b03      	ldr	r3, [sp, #12]
 8004e3e:	4298      	cmp	r0, r3
 8004e40:	bfb8      	it	lt
 8004e42:	4618      	movlt	r0, r3
 8004e44:	e7a4      	b.n	8004d90 <_printf_i+0x168>
 8004e46:	2301      	movs	r3, #1
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	47d0      	blx	sl
 8004e50:	3001      	adds	r0, #1
 8004e52:	d09b      	beq.n	8004d8c <_printf_i+0x164>
 8004e54:	3501      	adds	r5, #1
 8004e56:	68e3      	ldr	r3, [r4, #12]
 8004e58:	9903      	ldr	r1, [sp, #12]
 8004e5a:	1a5b      	subs	r3, r3, r1
 8004e5c:	42ab      	cmp	r3, r5
 8004e5e:	dcf2      	bgt.n	8004e46 <_printf_i+0x21e>
 8004e60:	e7eb      	b.n	8004e3a <_printf_i+0x212>
 8004e62:	2500      	movs	r5, #0
 8004e64:	f104 0619 	add.w	r6, r4, #25
 8004e68:	e7f5      	b.n	8004e56 <_printf_i+0x22e>
 8004e6a:	bf00      	nop
 8004e6c:	08005101 	.word	0x08005101
 8004e70:	08005112 	.word	0x08005112

08004e74 <memcpy>:
 8004e74:	440a      	add	r2, r1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	4770      	bx	lr
 8004e80:	b510      	push	{r4, lr}
 8004e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	d1f9      	bne.n	8004e82 <memcpy+0xe>
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <memmove>:
 8004e90:	4288      	cmp	r0, r1
 8004e92:	b510      	push	{r4, lr}
 8004e94:	eb01 0402 	add.w	r4, r1, r2
 8004e98:	d902      	bls.n	8004ea0 <memmove+0x10>
 8004e9a:	4284      	cmp	r4, r0
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	d807      	bhi.n	8004eb0 <memmove+0x20>
 8004ea0:	1e43      	subs	r3, r0, #1
 8004ea2:	42a1      	cmp	r1, r4
 8004ea4:	d008      	beq.n	8004eb8 <memmove+0x28>
 8004ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eae:	e7f8      	b.n	8004ea2 <memmove+0x12>
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	428a      	cmp	r2, r1
 8004eb6:	d100      	bne.n	8004eba <memmove+0x2a>
 8004eb8:	bd10      	pop	{r4, pc}
 8004eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ec2:	e7f7      	b.n	8004eb4 <memmove+0x24>

08004ec4 <_free_r>:
 8004ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ec6:	2900      	cmp	r1, #0
 8004ec8:	d048      	beq.n	8004f5c <_free_r+0x98>
 8004eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ece:	9001      	str	r0, [sp, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ed6:	bfb8      	it	lt
 8004ed8:	18e4      	addlt	r4, r4, r3
 8004eda:	f000 f8d3 	bl	8005084 <__malloc_lock>
 8004ede:	4a20      	ldr	r2, [pc, #128]	; (8004f60 <_free_r+0x9c>)
 8004ee0:	9801      	ldr	r0, [sp, #4]
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	4615      	mov	r5, r2
 8004ee6:	b933      	cbnz	r3, 8004ef6 <_free_r+0x32>
 8004ee8:	6063      	str	r3, [r4, #4]
 8004eea:	6014      	str	r4, [r2, #0]
 8004eec:	b003      	add	sp, #12
 8004eee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ef2:	f000 b8cd 	b.w	8005090 <__malloc_unlock>
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	d90b      	bls.n	8004f12 <_free_r+0x4e>
 8004efa:	6821      	ldr	r1, [r4, #0]
 8004efc:	1862      	adds	r2, r4, r1
 8004efe:	4293      	cmp	r3, r2
 8004f00:	bf04      	itt	eq
 8004f02:	681a      	ldreq	r2, [r3, #0]
 8004f04:	685b      	ldreq	r3, [r3, #4]
 8004f06:	6063      	str	r3, [r4, #4]
 8004f08:	bf04      	itt	eq
 8004f0a:	1852      	addeq	r2, r2, r1
 8004f0c:	6022      	streq	r2, [r4, #0]
 8004f0e:	602c      	str	r4, [r5, #0]
 8004f10:	e7ec      	b.n	8004eec <_free_r+0x28>
 8004f12:	461a      	mov	r2, r3
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	b10b      	cbz	r3, 8004f1c <_free_r+0x58>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d9fa      	bls.n	8004f12 <_free_r+0x4e>
 8004f1c:	6811      	ldr	r1, [r2, #0]
 8004f1e:	1855      	adds	r5, r2, r1
 8004f20:	42a5      	cmp	r5, r4
 8004f22:	d10b      	bne.n	8004f3c <_free_r+0x78>
 8004f24:	6824      	ldr	r4, [r4, #0]
 8004f26:	4421      	add	r1, r4
 8004f28:	1854      	adds	r4, r2, r1
 8004f2a:	42a3      	cmp	r3, r4
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	d1dd      	bne.n	8004eec <_free_r+0x28>
 8004f30:	681c      	ldr	r4, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	6053      	str	r3, [r2, #4]
 8004f36:	4421      	add	r1, r4
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	e7d7      	b.n	8004eec <_free_r+0x28>
 8004f3c:	d902      	bls.n	8004f44 <_free_r+0x80>
 8004f3e:	230c      	movs	r3, #12
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	e7d3      	b.n	8004eec <_free_r+0x28>
 8004f44:	6825      	ldr	r5, [r4, #0]
 8004f46:	1961      	adds	r1, r4, r5
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	bf04      	itt	eq
 8004f4c:	6819      	ldreq	r1, [r3, #0]
 8004f4e:	685b      	ldreq	r3, [r3, #4]
 8004f50:	6063      	str	r3, [r4, #4]
 8004f52:	bf04      	itt	eq
 8004f54:	1949      	addeq	r1, r1, r5
 8004f56:	6021      	streq	r1, [r4, #0]
 8004f58:	6054      	str	r4, [r2, #4]
 8004f5a:	e7c7      	b.n	8004eec <_free_r+0x28>
 8004f5c:	b003      	add	sp, #12
 8004f5e:	bd30      	pop	{r4, r5, pc}
 8004f60:	20000094 	.word	0x20000094

08004f64 <_malloc_r>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	1ccd      	adds	r5, r1, #3
 8004f68:	f025 0503 	bic.w	r5, r5, #3
 8004f6c:	3508      	adds	r5, #8
 8004f6e:	2d0c      	cmp	r5, #12
 8004f70:	bf38      	it	cc
 8004f72:	250c      	movcc	r5, #12
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	4606      	mov	r6, r0
 8004f78:	db01      	blt.n	8004f7e <_malloc_r+0x1a>
 8004f7a:	42a9      	cmp	r1, r5
 8004f7c:	d903      	bls.n	8004f86 <_malloc_r+0x22>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	6033      	str	r3, [r6, #0]
 8004f82:	2000      	movs	r0, #0
 8004f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f86:	f000 f87d 	bl	8005084 <__malloc_lock>
 8004f8a:	4921      	ldr	r1, [pc, #132]	; (8005010 <_malloc_r+0xac>)
 8004f8c:	680a      	ldr	r2, [r1, #0]
 8004f8e:	4614      	mov	r4, r2
 8004f90:	b99c      	cbnz	r4, 8004fba <_malloc_r+0x56>
 8004f92:	4f20      	ldr	r7, [pc, #128]	; (8005014 <_malloc_r+0xb0>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	b923      	cbnz	r3, 8004fa2 <_malloc_r+0x3e>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f862 	bl	8005064 <_sbrk_r>
 8004fa0:	6038      	str	r0, [r7, #0]
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 f85d 	bl	8005064 <_sbrk_r>
 8004faa:	1c43      	adds	r3, r0, #1
 8004fac:	d123      	bne.n	8004ff6 <_malloc_r+0x92>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f000 f86c 	bl	8005090 <__malloc_unlock>
 8004fb8:	e7e3      	b.n	8004f82 <_malloc_r+0x1e>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	1b5b      	subs	r3, r3, r5
 8004fbe:	d417      	bmi.n	8004ff0 <_malloc_r+0x8c>
 8004fc0:	2b0b      	cmp	r3, #11
 8004fc2:	d903      	bls.n	8004fcc <_malloc_r+0x68>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	441c      	add	r4, r3
 8004fc8:	6025      	str	r5, [r4, #0]
 8004fca:	e004      	b.n	8004fd6 <_malloc_r+0x72>
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	42a2      	cmp	r2, r4
 8004fd0:	bf0c      	ite	eq
 8004fd2:	600b      	streq	r3, [r1, #0]
 8004fd4:	6053      	strne	r3, [r2, #4]
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f000 f85a 	bl	8005090 <__malloc_unlock>
 8004fdc:	f104 000b 	add.w	r0, r4, #11
 8004fe0:	1d23      	adds	r3, r4, #4
 8004fe2:	f020 0007 	bic.w	r0, r0, #7
 8004fe6:	1ac2      	subs	r2, r0, r3
 8004fe8:	d0cc      	beq.n	8004f84 <_malloc_r+0x20>
 8004fea:	1a1b      	subs	r3, r3, r0
 8004fec:	50a3      	str	r3, [r4, r2]
 8004fee:	e7c9      	b.n	8004f84 <_malloc_r+0x20>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	6864      	ldr	r4, [r4, #4]
 8004ff4:	e7cc      	b.n	8004f90 <_malloc_r+0x2c>
 8004ff6:	1cc4      	adds	r4, r0, #3
 8004ff8:	f024 0403 	bic.w	r4, r4, #3
 8004ffc:	42a0      	cmp	r0, r4
 8004ffe:	d0e3      	beq.n	8004fc8 <_malloc_r+0x64>
 8005000:	1a21      	subs	r1, r4, r0
 8005002:	4630      	mov	r0, r6
 8005004:	f000 f82e 	bl	8005064 <_sbrk_r>
 8005008:	3001      	adds	r0, #1
 800500a:	d1dd      	bne.n	8004fc8 <_malloc_r+0x64>
 800500c:	e7cf      	b.n	8004fae <_malloc_r+0x4a>
 800500e:	bf00      	nop
 8005010:	20000094 	.word	0x20000094
 8005014:	20000098 	.word	0x20000098

08005018 <_realloc_r>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	4607      	mov	r7, r0
 800501c:	4614      	mov	r4, r2
 800501e:	460e      	mov	r6, r1
 8005020:	b921      	cbnz	r1, 800502c <_realloc_r+0x14>
 8005022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005026:	4611      	mov	r1, r2
 8005028:	f7ff bf9c 	b.w	8004f64 <_malloc_r>
 800502c:	b922      	cbnz	r2, 8005038 <_realloc_r+0x20>
 800502e:	f7ff ff49 	bl	8004ec4 <_free_r>
 8005032:	4625      	mov	r5, r4
 8005034:	4628      	mov	r0, r5
 8005036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005038:	f000 f830 	bl	800509c <_malloc_usable_size_r>
 800503c:	42a0      	cmp	r0, r4
 800503e:	d20f      	bcs.n	8005060 <_realloc_r+0x48>
 8005040:	4621      	mov	r1, r4
 8005042:	4638      	mov	r0, r7
 8005044:	f7ff ff8e 	bl	8004f64 <_malloc_r>
 8005048:	4605      	mov	r5, r0
 800504a:	2800      	cmp	r0, #0
 800504c:	d0f2      	beq.n	8005034 <_realloc_r+0x1c>
 800504e:	4631      	mov	r1, r6
 8005050:	4622      	mov	r2, r4
 8005052:	f7ff ff0f 	bl	8004e74 <memcpy>
 8005056:	4631      	mov	r1, r6
 8005058:	4638      	mov	r0, r7
 800505a:	f7ff ff33 	bl	8004ec4 <_free_r>
 800505e:	e7e9      	b.n	8005034 <_realloc_r+0x1c>
 8005060:	4635      	mov	r5, r6
 8005062:	e7e7      	b.n	8005034 <_realloc_r+0x1c>

08005064 <_sbrk_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4d06      	ldr	r5, [pc, #24]	; (8005080 <_sbrk_r+0x1c>)
 8005068:	2300      	movs	r3, #0
 800506a:	4604      	mov	r4, r0
 800506c:	4608      	mov	r0, r1
 800506e:	602b      	str	r3, [r5, #0]
 8005070:	f7fb fe8e 	bl	8000d90 <_sbrk>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_sbrk_r+0x1a>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_sbrk_r+0x1a>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	200001d4 	.word	0x200001d4

08005084 <__malloc_lock>:
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <__malloc_lock+0x8>)
 8005086:	f000 b811 	b.w	80050ac <__retarget_lock_acquire_recursive>
 800508a:	bf00      	nop
 800508c:	200001dc 	.word	0x200001dc

08005090 <__malloc_unlock>:
 8005090:	4801      	ldr	r0, [pc, #4]	; (8005098 <__malloc_unlock+0x8>)
 8005092:	f000 b80c 	b.w	80050ae <__retarget_lock_release_recursive>
 8005096:	bf00      	nop
 8005098:	200001dc 	.word	0x200001dc

0800509c <_malloc_usable_size_r>:
 800509c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a0:	1f18      	subs	r0, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bfbc      	itt	lt
 80050a6:	580b      	ldrlt	r3, [r1, r0]
 80050a8:	18c0      	addlt	r0, r0, r3
 80050aa:	4770      	bx	lr

080050ac <__retarget_lock_acquire_recursive>:
 80050ac:	4770      	bx	lr

080050ae <__retarget_lock_release_recursive>:
 80050ae:	4770      	bx	lr

080050b0 <_init>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr

080050bc <_fini>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr
